stack with c...........
topic

1.pop
2.push
3.peek
...code example......
#include<stdio.h>
#define CAPACITY 3
int stack[CAPACITY];
int top = -1;
void push(int x){
    if(top < CAPACITY-1){
    top = top + 1;
    stack[top] = x;
    printf("successfully add item %d\n", x);
    }else{
        printf("no excption\n");
    }   
}
int pop(){
    if(top >= 0){
        int val = stack[];
        top = top-1;
        return val;
    }
    printf("Exception pop\n");
    return -1;
}
int peek(){
    if(top >= 0){
        return stack[top];
        }
    printf("exeption from peek. empte step\n");
    return -1;
}
int main(){
    printf("hello world\n");
   printf("peek %d\n", peek());
    push(20);
    push(50);
    push(30);
    printf("pop item:%d\n",pop());
    push(40);
    printf("top of stack:%d\n", peek());
    printf("top of stack:%d\n", peek());
    printf("top of stack:%d\n", peek());
    return 0;
}

02 link list with malloc(), calloc(), free(), realloc().........

#include <stdio.h>
#include <stdlib.h>
struct node{
 
 int data;
 struct node *next;
};


int main(){
    struct node *a = NULL;
    struct node *b = NULL;
    struct node *c = NULL;

    a = (struct node*) malloc(sizeof(struct node));
    b = (struct node*) malloc(sizeof(struct node));
    c = (struct node*) malloc(sizeof(struct node));

    a->data = 10;
    b->data = 20;
    c->data = 30;

    a->next = b;
    b->next = c;
    c->next = NULL;

    while (a != NULL)
    {
        printf("%d -> ", a->data);
        a = a->next;
    }
    


    
    
return 0;
}

03 array to link list ..........

#include <stdio.h>
#include <stdlib.h>
struct node *creatlinklist(int arr[], int size);

struct node{
    int data;
    struct node *next;
};

int main(){
 int a[] = {2, 3, 5};
 struct node *head;
 head = creatlinklist(a, 3);
 while (head != NULL)
 {
    printf("%d->",head->data);
    head = head->next;
 }
    printf("NULL\n");
    return 0;
}


struct node *creatlinklist(int arr[], int size){
    struct node *head = NULL, *temp = NULL, *current = NULL;
    for(int i = 0; i < size; i++){
        temp = (struct node *)malloc(sizeof(struct node));
        temp->data = arr[i];
        temp->next = NULL;
        if(head == NULL){
            head = temp;
            current = temp;
        }else{
            current->next = temp;
            current = current->next;
        }

    }
    return head;
}

04 seartching to linklist.........

#include <stdio.h>
#include <stdlib.h>
//function ...
struct node *creatlinklist(int arr[], int size);
int seartchinlinklist(struct node *head, int value);
// void revarslinklist(struct node *head);


struct node{
    int data;
    struct node *next;
};

int main(){
 int a[] = {2, 3, 5};
 struct node *head;
 head = creatlinklist(a, 3);
 printf("index: %d", seartchinlinklist(head, 5) );

    return 0;
}

int seartchinlinklist(struct node *head, int value){
    int index = 1;
    while(head != NULL){
        if(head->data == value){
            return index;
        }
        index++;
        head = head->next;
    }
    return -1;
}


struct node *creatlinklist(int arr[], int size){
    struct node *head = NULL, *temp = NULL, *current = NULL;
    for(int i = 0; i < size; i++){
        temp = (struct node *)malloc(sizeof(struct node));
        temp->data = arr[i];
        temp->next = NULL;
        if(head == NULL){
            head = temp;
            current = temp;
        }else{
            current->next = temp;
            current = current->next;
        }

    }
    return head;
}
